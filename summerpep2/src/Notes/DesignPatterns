Design Patterns:                                                                                                                  |
																																  |
----------------------------------------------------------------------------------------------------------------------------------|
ðŸ”µ 1. Creational Design Patterns
----------------------------------------------------------------------------------------------------------------------------------
| Pattern              | Example Use Case                                                                                        |
| -------------------- | ------------------------------------------------------------------------------------------------------- |
| **Singleton**        | **Logger** class â€“ ensuring only one logging instance for the whole application.                        |
| **Factory Method**   | **Notification Factory** â€“ create different types of notifications like Email, SMS, Push.               |
| **Abstract Factory** | **UI Factory** â€“ generating UI elements for different platforms (Windows, macOS, Linux).                |
| **Builder**          |  Its a creational design pattern, that helps you build a complex object in simpler way.
				          Why we use??
				          -> When object creation has optional fields.
				          -> To avoid constructors with too many parameters.(Telescoping constructor problem).
				          -> To improve readability and maintainability.
| **Prototype**        | **Cloning Shapes** â€“ duplicating graphic shapes in a design app without rebuilding properties manually. |
----------------------------------------------------------------------------------------------------------------------------------

ðŸŸ¢ 2. Structural Design Patterns
---------------------------------------------------------------------------------------------------------------------------------
| Pattern       | Example Use Case                                                                                              |
| ------------- | ------------------------------------------------------------------------------------------------------------- |
| **Adapter**   | Acts as a bridge between two incompactible systems.
	              This design pattern allows tow compactible interfaces to work together by converting one interface into another that the client expects. 
| **Bridge**    | **Remote Control System** â€“ separate abstraction (Remote) from implementation (TV, Set-top box).              |
| **Composite** | **Folder Structure** â€“ treat individual files and folders (which may contain files) uniformly.                |
| **Decorator** | **Coffee Shop Order** â€“ wrap base coffee object with decorators like Milk, Sugar, Cream.                      |
| **Facade**    | **Video Conversion Library** â€“ hide complex subsystems (Codec, BitrateReader, etc.) under a simple interface. |
| **Flyweight** | **Character Rendering** â€“ share font data among multiple characters in a word processor.                      |
| **Proxy**     | **Internet Proxy** â€“ control access to the internet, cache content, or perform security checks.               |
---------------------------------------------------------------------------------------------------------------------------------

ðŸ”´ 3. Behavioral Design Patterns
---------------------------------------------------------------------------------------------------------------------------------------------
| Pattern                     | Example Use Case                                                                                            |
| --------------------------- | ----------------------------------------------------------------------------------------------------------- |
| **Observer**                | **GUI Event System** â€“ multiple listeners observing button clicks or input changes.                         |
| **Strategy**                | **Sorting Strategy** â€“ dynamically choose between quick sort, merge sort, or bubble sort.                   |
| **Command**                 | **Remote Control** â€“ encapsulate each button as a command like TurnOn, TurnOff, VolumeUp.                   |
| **Chain of Responsibility** | **Request Handling** â€“ multiple handlers (Auth â†’ Validation â†’ Logging) process web requests.                |
| **Template Method**         | **Document Parser** â€“ common algorithm steps but format-specific parsing (XML, JSON).                       |
| **State**                   | **Media Player** â€“ changing behavior (play, pause, stop) based on internal state.                           |
| **Iterator**                | **Collection Traversal** â€“ traverse elements in a custom list or data structure.                            |
| **Mediator**                | **Chat Room** â€“ central hub controlling communication between multiple users.                               |
| **Memento**                 | **Text Editor Undo** â€“ capture and restore text state (Ctrl+Z functionality).                               |
| **Interpreter**             | **Math Expression Parser** â€“ parsing and evaluating expressions like `2 + 3 * 5`.                           |
| **Visitor**                 | **Tax Calculator** â€“ perform operations on employee types (Contractor, FullTime) without modifying classes. |
--------------------------------------------------------------------------------------------------------------------------------------------
âœ… 1. SOLID Principles (Most Important)

A set of 5 object-oriented design principles:

Principle	Description
S - Single Responsibility Principle (SRP)	A class should have only one reason to change. Keep classes focused.
O - Open/Closed Principle (OCP)	Software entities (classes, methods) should be open for extension but closed for modification. Use interfaces/abstract classes.
L - Liskov Substitution Principle (LSP)	Subtypes must be substitutable for their base types without altering correctness.
I - Interface Segregation Principle (ISP)	Donâ€™t force classes to implement unused methods. Prefer smaller, specific interfaces.
D - Dependency Inversion Principle (DIP)	Depend on abstractions, not on concrete implementations (use interfaces).


1. S -  Single Responsibility Principle (SRP)

 Example:
 
 TvRemote{
 DecisionMaker(command){
 if('on'){
 	StartTv();
 if('off'){
 	StopTv();
 if('youtube'){
 	StartYTB();
 }
 }
 
 Singleton Method Design Pattern:
 The Singleton Method Design Pattern ensures a class has only one instance and provides a global access point to it. Itâ€™s ideal for scenarios requiring centralized control, like managing database connections or configuration settings. 
 
 